1. Our maze generator works by using the recursive depth-first search algorithm. To make sure that this is possible we needed to implement a "Cell" class for the data type of each part of the maze and a "Grid" class which is the logic of the algorithm. The design works by creating an ArrayList of Cells and a Stack of cells. It begins by filling the ArrayList with 2 dimension cells. It then chooses an intial cell, marks it as visited then pushes it to the stack. While the stack is not empty it will execute the following; pop a cell from the stack and make it a current cell, choose an unvisited neighbour, remove the wall between current cell and chosen cell and finally it marks the chosen cell as visited and pushes it to the stack.

2. The second OOP explanation is about the win & loss conditions of the game. The game can be won by only one condition. This is when all monster have been killed. The way that the win is measures is that the Main class calls the UI class. In the UI class there is a method called "winGame", winGame checks the grid class. Inside the gridclass there is another method called winCondition. In order for this method to pass true all monsters must be able to return true on their personal death status.

	Similar to this there is also a loss condition. If the hero touches a monster and does not have a reserved powerup (kept in his class) the game will immediate end (break the while loop). At this point the game will state to the user that they have lost the game.
